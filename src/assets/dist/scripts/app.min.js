!function e(t,n,r){function o(u,a){if(!n[u]){if(!t[u]){var c="function"==typeof require&&require;if(!a&&c)return c(u,!0);if(i)return i(u,!0);var l=new Error("Cannot find module '"+u+"'");throw l.code="MODULE_NOT_FOUND",l}var f=n[u]={exports:{}};t[u][0].call(f.exports,function(e){var n=t[u][1][e];return o(n?n:e)},f,f.exports,e,t,n,r)}return n[u].exports}for(var i="function"==typeof require&&require,u=0;u<r.length;u++)o(r[u]);return o}({1:[function(e,t,n){"use strict";function r(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}Object.defineProperty(n,"__esModule",{value:!0});var o=function(){function e(e,t){for(var n=0;n<t.length;n++){var r=t[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,r.key,r)}}return function(t,n,r){return n&&e(t.prototype,n),r&&e(t,r),t}}(),i=null,u=function(){function e(){r(this,e),null!==i&&!1!=i instanceof this||(this.counters=new Map,this.events=new Map,this.moduleMap=new Map,i=this)}return o(e,[{key:"addModule",value:function(e,t){return this.moduleMap.set(e,t),this}},{key:"addCounter",value:function(e){var t=e.id,n=e.jsModule,r=e.jsObject,o=e.options,i=void 0===o?{}:o;return this.moduleMap.has(n)?(n=this.moduleMap.get(n),this.counters.set(t,new n(this,r,i)),this):this}},{key:"addEvent",value:function(e){var t=e.jsModule,n=e.type,r=e.options,o=void 0===r?{}:r;if(!this.moduleMap.has(t))return this;t=this.moduleMap.get(t);var i=this.events.has(n)?this.events.get(n):[];return i.push(new t(this,o)),this.events.set(n,i),this}},{key:"addCounters",value:function(e){var t=!0,n=!1,r=void 0;try{for(var o,i=e[Symbol.iterator]();!(t=(o=i.next()).done);t=!0){var u=o.value;this.addCounter(u)}}catch(a){n=!0,r=a}finally{try{!t&&i["return"]&&i["return"]()}finally{if(n)throw r}}return this}},{key:"addEvents",value:function(e){var t=!0,n=!1,r=void 0;try{for(var o,i=e[Symbol.iterator]();!(t=(o=i.next()).done);t=!0){var u=o.value;this.addEvent(u)}}catch(a){n=!0,r=a}finally{try{!t&&i["return"]&&i["return"]()}finally{if(n)throw r}}return this}},{key:"trigger",value:function(e,t){var n=this.events.has(e)?this.events.get(e):[],r=!0,o=!1,i=void 0;try{for(var u,a=n[Symbol.iterator]();!(r=(u=a.next()).done);r=!0){var c=u.value;c.trigger(t)}}catch(l){o=!0,i=l}finally{try{!r&&a["return"]&&a["return"]()}finally{if(o)throw i}}return this}}]),e}();n.UnionAnalytics=u},{}],2:[function(e,t,n){(function(t){"use strict";var n=e("./UnionAnalytics"),r=e("./counters/CounterGoogleAnalytics"),o=e("./counters/CounterYandexMetrika"),i=e("./counters/CounterPiwik"),u=e("./events/Click"),a=e("./events/Submit"),c=new n.UnionAnalytics;c.addModule("CounterGoogleAnalytics",r.CounterGoogleAnalytics),c.addModule("CounterYandexMetrika",o.CounterYandexMetrika),c.addModule("CounterPiwik",i.CounterPiwik),c.addModule("Click",u.Click),c.addModule("Submit",a.Submit),t.UnionAnalytics=c}).call(this,"undefined"!=typeof global?global:"undefined"!=typeof self?self:"undefined"!=typeof window?window:{})},{"./UnionAnalytics":1,"./counters/CounterGoogleAnalytics":3,"./counters/CounterPiwik":5,"./counters/CounterYandexMetrika":6,"./events/Click":7,"./events/Submit":9}],3:[function(e,t,n){"use strict";function r(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}function o(e,t){if(!e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return!t||"object"!=typeof t&&"function"!=typeof t?e:t}function i(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function, not "+typeof t);e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,enumerable:!1,writable:!0,configurable:!0}}),t&&(Object.setPrototypeOf?Object.setPrototypeOf(e,t):e.__proto__=t)}Object.defineProperty(n,"__esModule",{value:!0}),n.CounterGoogleAnalytics=void 0;var u=function(){function e(e,t){for(var n=0;n<t.length;n++){var r=t[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,r.key,r)}}return function(t,n,r){return n&&e(t.prototype,n),r&&e(t,r),t}}(),a=function f(e,t,n){null===e&&(e=Function.prototype);var r=Object.getOwnPropertyDescriptor(e,t);if(void 0===r){var o=Object.getPrototypeOf(e);return null===o?void 0:f(o,t,n)}if("value"in r)return r.value;var i=r.get;if(void 0!==i)return i.call(n)},c=e("./CounterInterface"),l=function(e){function t(){return r(this,t),o(this,Object.getPrototypeOf(t).apply(this,arguments))}return i(t,e),u(t,[{key:"init",value:function(e){a(Object.getPrototypeOf(t.prototype),"init",this).call(this,e)}},{key:"resolveJsObject",value:function(e){return window[e]||a(Object.getPrototypeOf(t.prototype),"resolveJsObject",this).call(this,e)}},{key:"sendEvent",value:function(e,t,n){}}]),t}(c.CounterInterface);n.CounterGoogleAnalytics=l},{"./CounterInterface":4}],4:[function(e,t,n){"use strict";function r(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}Object.defineProperty(n,"__esModule",{value:!0});var o=function(){function e(e,t){for(var n=0;n<t.length;n++){var r=t[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,r.key,r)}}return function(t,n,r){return n&&e(t.prototype,n),r&&e(t,r),t}}(),i=function(){function e(t,n,o){r(this,e),this.locator=t,this.jsObject=this.resolveJsObject(n),this.rawOptions=o,this.init(o)}return o(e,[{key:"init",value:function(e){}},{key:"resolveJsObject",value:function(e){return{}}},{key:"sendEvent",value:function(e,t,n){}}]),e}();n.CounterInterface=i},{}],5:[function(e,t,n){"use strict";function r(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}function o(e,t){if(!e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return!t||"object"!=typeof t&&"function"!=typeof t?e:t}function i(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function, not "+typeof t);e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,enumerable:!1,writable:!0,configurable:!0}}),t&&(Object.setPrototypeOf?Object.setPrototypeOf(e,t):e.__proto__=t)}Object.defineProperty(n,"__esModule",{value:!0}),n.CounterPiwik=void 0;var u=function(){function e(e,t){for(var n=0;n<t.length;n++){var r=t[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,r.key,r)}}return function(t,n,r){return n&&e(t.prototype,n),r&&e(t,r),t}}(),a=function f(e,t,n){null===e&&(e=Function.prototype);var r=Object.getOwnPropertyDescriptor(e,t);if(void 0===r){var o=Object.getPrototypeOf(e);return null===o?void 0:f(o,t,n)}if("value"in r)return r.value;var i=r.get;if(void 0!==i)return i.call(n)},c=e("./CounterInterface"),l=function(e){function t(){return r(this,t),o(this,Object.getPrototypeOf(t).apply(this,arguments))}return i(t,e),u(t,[{key:"init",value:function(e){a(Object.getPrototypeOf(t.prototype),"init",this).call(this,e)}},{key:"resolveJsObject",value:function(e){return window[e]||a(Object.getPrototypeOf(t.prototype),"resolveJsObject",this).call(this,e)}},{key:"sendEvent",value:function(e,t,n){}}]),t}(c.CounterInterface);n.CounterPiwik=l},{"./CounterInterface":4}],6:[function(e,t,n){"use strict";function r(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}function o(e,t){if(!e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return!t||"object"!=typeof t&&"function"!=typeof t?e:t}function i(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function, not "+typeof t);e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,enumerable:!1,writable:!0,configurable:!0}}),t&&(Object.setPrototypeOf?Object.setPrototypeOf(e,t):e.__proto__=t)}Object.defineProperty(n,"__esModule",{value:!0}),n.CounterYandexMetrika=void 0;var u=function(){function e(e,t){for(var n=0;n<t.length;n++){var r=t[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,r.key,r)}}return function(t,n,r){return n&&e(t.prototype,n),r&&e(t,r),t}}(),a=function f(e,t,n){null===e&&(e=Function.prototype);var r=Object.getOwnPropertyDescriptor(e,t);if(void 0===r){var o=Object.getPrototypeOf(e);return null===o?void 0:f(o,t,n)}if("value"in r)return r.value;var i=r.get;if(void 0!==i)return i.call(n)},c=e("./CounterInterface"),l=function(e){function t(){return r(this,t),o(this,Object.getPrototypeOf(t).apply(this,arguments))}return i(t,e),u(t,[{key:"init",value:function(e){a(Object.getPrototypeOf(t.prototype),"init",this).call(this,e)}},{key:"resolveJsObject",value:function(e){return window["yaCounter"+e]||a(Object.getPrototypeOf(t.prototype),"resolveJsObject",this).call(this,e)}},{key:"sendEvent",value:function(e,t,n){console.log(e)}}]),t}(c.CounterInterface);n.CounterYandexMetrika=l},{"./CounterInterface":4}],7:[function(e,t,n){"use strict";function r(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}function o(e,t){if(!e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return!t||"object"!=typeof t&&"function"!=typeof t?e:t}function i(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function, not "+typeof t);e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,enumerable:!1,writable:!0,configurable:!0}}),t&&(Object.setPrototypeOf?Object.setPrototypeOf(e,t):e.__proto__=t)}Object.defineProperty(n,"__esModule",{value:!0}),n.Click=void 0;var u=function(){function e(e,t){for(var n=0;n<t.length;n++){var r=t[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,r.key,r)}}return function(t,n,r){return n&&e(t.prototype,n),r&&e(t,r),t}}(),a=e("./EventInterface"),c=function(e){function t(){return r(this,t),o(this,Object.getPrototypeOf(t).apply(this,arguments))}return i(t,e),u(t,[{key:"handle",value:function(e){var t=!0,n=!1,r=void 0;try{for(var o,i=this.locator.counters.values()[Symbol.iterator]();!(t=(o=i.next()).done);t=!0){var u=o.value;u.sendEvent(e,{},{})}}catch(a){n=!0,r=a}finally{try{!t&&i["return"]&&i["return"]()}finally{if(n)throw r}}}},{key:"eventName",get:function(){return"click"}}]),t}(a.EventInterface);n.Click=c},{"./EventInterface":8}],8:[function(e,t,n){"use strict";function r(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}Object.defineProperty(n,"__esModule",{value:!0});var o=function(){function e(e,t){for(var n=0;n<t.length;n++){var r=t[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,r.key,r)}}return function(t,n,r){return n&&e(t.prototype,n),r&&e(t,r),t}}(),i=function(){function e(t,n){r(this,e),this.locator=t,this.init(n),this.attachHandlers(n)}return o(e,[{key:"init",value:function(e){}},{key:"attachHandlers",value:function(e){var t=this,n=Object.prototype.hasOwnProperty;if(null!==e&&n.call(e,"selectors")){var r=!0,o=!1,i=void 0;try{for(var u,a=e.selectors[Symbol.iterator]();!(r=(u=a.next()).done);r=!0)for(var c=u.value,l=document.querySelectorAll(c),f=0;f<l.length;f++)l[f].addEventListener(this.eventName,function(e){return t.handle(e)})}catch(s){o=!0,i=s}finally{try{!r&&a["return"]&&a["return"]()}finally{if(o)throw i}}}}},{key:"handle",value:function(e){}},{key:"eventName",get:function(){return""}}]),e}();n.EventInterface=i},{}],9:[function(e,t,n){"use strict";function r(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}function o(e,t){if(!e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return!t||"object"!=typeof t&&"function"!=typeof t?e:t}function i(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function, not "+typeof t);e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,enumerable:!1,writable:!0,configurable:!0}}),t&&(Object.setPrototypeOf?Object.setPrototypeOf(e,t):e.__proto__=t)}Object.defineProperty(n,"__esModule",{value:!0}),n.Submit=void 0;var u=function(){function e(e,t){for(var n=0;n<t.length;n++){var r=t[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,r.key,r)}}return function(t,n,r){return n&&e(t.prototype,n),r&&e(t,r),t}}(),a=e("./EventInterface"),c=function(e){function t(){return r(this,t),o(this,Object.getPrototypeOf(t).apply(this,arguments))}return i(t,e),u(t,[{key:"handle",value:function(e){var t=!0,n=!1,r=void 0;try{for(var o,i=this.locator.counters.values()[Symbol.iterator]();!(t=(o=i.next()).done);t=!0){var u=o.value;u.sendEvent(e,{},{})}}catch(a){n=!0,r=a}finally{try{!t&&i["return"]&&i["return"]()}finally{if(n)throw r}}}},{key:"eventName",get:function(){return"submit"}}]),t}(a.EventInterface);n.Submit=c},{"./EventInterface":8}]},{},[2]);
//# sourceMappingURL=data:application/json;base64,
