!function e(t,n,r){function o(u,a){if(!n[u]){if(!t[u]){var c="function"==typeof require&&require;if(!a&&c)return c(u,!0);if(i)return i(u,!0);var l=new Error("Cannot find module '"+u+"'");throw l.code="MODULE_NOT_FOUND",l}var f=n[u]={exports:{}};t[u][0].call(f.exports,function(e){var n=t[u][1][e];return o(n?n:e)},f,f.exports,e,t,n,r)}return n[u].exports}for(var i="function"==typeof require&&require,u=0;u<r.length;u++)o(r[u]);return o}({1:[function(e,t,n){"use strict";function r(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}Object.defineProperty(n,"__esModule",{value:!0});var o=function(){function e(e,t){for(var n=0;n<t.length;n++){var r=t[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,r.key,r)}}return function(t,n,r){return n&&e(t.prototype,n),r&&e(t,r),t}}(),i=null,u=function(){function e(){r(this,e),null!==i&&!1!=i instanceof this||(this.counters=new Map,this.events=new Map,this.moduleMap=new Map,i=this)}return o(e,[{key:"addModule",value:function(e,t){return this.moduleMap.set(e,t),this}},{key:"addCounter",value:function(e){var t=Object.prototype.hasOwnProperty;if(!1===t.call(e,"jsModule")||!1===this.moduleMap.has(e.jsModule))return this;var n=this.moduleMap.get(e.jsModule);return this.counters.set(e.id,new n(this,e)),this}},{key:"addEvent",value:function(e){var t=e.jsModule,n=e.type,r=e.options,o=void 0===r?{}:r;if(!this.moduleMap.has(t))return this;t=this.moduleMap.get(t);var i=this.events.has(n)?this.events.get(n):[];return i.push(new t(this,o)),this.events.set(n,i),this}},{key:"addCounters",value:function(e){var t=!0,n=!1,r=void 0;try{for(var o,i=e[Symbol.iterator]();!(t=(o=i.next()).done);t=!0){var u=o.value;this.addCounter(u)}}catch(a){n=!0,r=a}finally{try{!t&&i["return"]&&i["return"]()}finally{if(n)throw r}}return this}},{key:"addEvents",value:function(e){var t=!0,n=!1,r=void 0;try{for(var o,i=e[Symbol.iterator]();!(t=(o=i.next()).done);t=!0){var u=o.value;this.addEvent(u)}}catch(a){n=!0,r=a}finally{try{!t&&i["return"]&&i["return"]()}finally{if(n)throw r}}return this}}],[{key:"logError",value:function(e){"undefined"!=typeof console&&console.log(e)}}]),e}();n.IntentAnalytics=u},{}],2:[function(e,t,n){(function(t){"use strict";var n=e("./IntentAnalytics"),r=e("./counters/GoogleAnalytics"),o=e("./counters/YandexMetrika"),i=e("./counters/Piwik"),u=e("./events/Click"),a=e("./events/Submit"),c=new n.IntentAnalytics;c.addModule("GoogleAnalytics",r.GoogleAnalytics),c.addModule("YandexMetrika",o.YandexMetrika),c.addModule("Piwik",i.Piwik),c.addModule("Click",u.Click),c.addModule("Submit",a.Submit),t.IntentAnalytics=c}).call(this,"undefined"!=typeof global?global:"undefined"!=typeof self?self:"undefined"!=typeof window?window:{})},{"./IntentAnalytics":1,"./counters/GoogleAnalytics":4,"./counters/Piwik":5,"./counters/YandexMetrika":6,"./events/Click":7,"./events/Submit":9}],3:[function(e,t,n){"use strict";function r(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}Object.defineProperty(n,"__esModule",{value:!0});var o=function(){function e(e,t){for(var n=0;n<t.length;n++){var r=t[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,r.key,r)}}return function(t,n,r){return n&&e(t.prototype,n),r&&e(t,r),t}}(),i=function(){function e(t,n){r(this,e),Object.assign(this,n),this.counterSet=!1,this.locator=t,this.init(n.options),this.resolveJsObject(n.jsObject)}return o(e,[{key:"init",value:function(e){}},{key:"resolveJsObject",value:function(e){return{}}},{key:"sendEvent",value:function(e,t,n){}}]),e}();n.CounterInterface=i},{}],4:[function(e,t,n){"use strict";function r(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}function o(e,t){if(!e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return!t||"object"!=typeof t&&"function"!=typeof t?e:t}function i(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function, not "+typeof t);e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,enumerable:!1,writable:!0,configurable:!0}}),t&&(Object.setPrototypeOf?Object.setPrototypeOf(e,t):e.__proto__=t)}Object.defineProperty(n,"__esModule",{value:!0}),n.GoogleAnalytics=void 0;var u="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol?"symbol":typeof e},a=function(){function e(e,t){for(var n=0;n<t.length;n++){var r=t[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,r.key,r)}}return function(t,n,r){return n&&e(t.prototype,n),r&&e(t,r),t}}(),c=function y(e,t,n){null===e&&(e=Function.prototype);var r=Object.getOwnPropertyDescriptor(e,t);if(void 0===r){var o=Object.getPrototypeOf(e);return null===o?void 0:y(o,t,n)}if("value"in r)return r.value;var i=r.get;if(void 0!==i)return i.call(n)},l=e("./CounterInterface"),f=e("../IntentAnalytics"),s=function(e){function t(){return r(this,t),o(this,Object.getPrototypeOf(t).apply(this,arguments))}return i(t,e),a(t,[{key:"init",value:function(e){c(Object.getPrototypeOf(t.prototype),"init",this).call(this,e)}},{key:"resolveJsObject",value:function(e){var t=this;"function"==typeof window[e]?window[e](function(){try{t.jsObject=window[e].getByName(t.title),t.counterSet=!0}catch(n){f.IntentAnalytics.logError("Cant initialize GoogleCounter with title '"+t.title+"'")}}):f.IntentAnalytics.logError("Global Google Analytics function '"+e+"' not found!")}},{key:"sendEvent",value:function(e,t,n){console.log(u(this.jsObject))}}]),t}(l.CounterInterface);n.GoogleAnalytics=s},{"../IntentAnalytics":1,"./CounterInterface":3}],5:[function(e,t,n){"use strict";function r(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}function o(e,t){if(!e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return!t||"object"!=typeof t&&"function"!=typeof t?e:t}function i(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function, not "+typeof t);e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,enumerable:!1,writable:!0,configurable:!0}}),t&&(Object.setPrototypeOf?Object.setPrototypeOf(e,t):e.__proto__=t)}Object.defineProperty(n,"__esModule",{value:!0}),n.CounterPiwik=void 0;var u=function(){function e(e,t){for(var n=0;n<t.length;n++){var r=t[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,r.key,r)}}return function(t,n,r){return n&&e(t.prototype,n),r&&e(t,r),t}}(),a=function f(e,t,n){null===e&&(e=Function.prototype);var r=Object.getOwnPropertyDescriptor(e,t);if(void 0===r){var o=Object.getPrototypeOf(e);return null===o?void 0:f(o,t,n)}if("value"in r)return r.value;var i=r.get;if(void 0!==i)return i.call(n)},c=e("./CounterInterface"),l=function(e){function t(){return r(this,t),o(this,Object.getPrototypeOf(t).apply(this,arguments))}return i(t,e),u(t,[{key:"init",value:function(e){a(Object.getPrototypeOf(t.prototype),"init",this).call(this,e)}},{key:"resolveJsObject",value:function(e){return window[e]||a(Object.getPrototypeOf(t.prototype),"resolveJsObject",this).call(this,e)}},{key:"sendEvent",value:function(e,t,n){}}]),t}(c.CounterInterface);n.CounterPiwik=l},{"./CounterInterface":3}],6:[function(e,t,n){"use strict";function r(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}function o(e,t){if(!e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return!t||"object"!=typeof t&&"function"!=typeof t?e:t}function i(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function, not "+typeof t);e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,enumerable:!1,writable:!0,configurable:!0}}),t&&(Object.setPrototypeOf?Object.setPrototypeOf(e,t):e.__proto__=t)}Object.defineProperty(n,"__esModule",{value:!0}),n.YandexMetrika=void 0;var u=function(){function e(e,t){var n=[],r=!0,o=!1,i=void 0;try{for(var u,a=e[Symbol.iterator]();!(r=(u=a.next()).done)&&(n.push(u.value),!t||n.length!==t);r=!0);}catch(c){o=!0,i=c}finally{try{!r&&a["return"]&&a["return"]()}finally{if(o)throw i}}return n}return function(t,n){if(Array.isArray(t))return t;if(Symbol.iterator in Object(t))return e(t,n);throw new TypeError("Invalid attempt to destructure non-iterable instance")}}(),a=function(){function e(e,t){for(var n=0;n<t.length;n++){var r=t[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,r.key,r)}}return function(t,n,r){return n&&e(t.prototype,n),r&&e(t,r),t}}(),c=function s(e,t,n){null===e&&(e=Function.prototype);var r=Object.getOwnPropertyDescriptor(e,t);if(void 0===r){var o=Object.getPrototypeOf(e);return null===o?void 0:s(o,t,n)}if("value"in r)return r.value;var i=r.get;if(void 0!==i)return i.call(n)},l=e("./CounterInterface"),f=function(e){function t(){return r(this,t),o(this,Object.getPrototypeOf(t).apply(this,arguments))}return i(t,e),a(t,[{key:"init",value:function(e){this.eventsQueue=new Map,c(Object.getPrototypeOf(t.prototype),"init",this).call(this,e)}},{key:"resolveJsObject",value:function(e){var t=this;document.addEventListener(String(""+e+this.counterId+"inited").toLowerCase(),function(){"undefined"!=typeof window[e+t.counterId]?(t.jsObject=window[e+t.counterId],t.counterSet=!0):IntentAnalytics.logError("Cant initialize YandexCounter with id '"+t.counterId+"'")})}},{key:"sendEvent",value:function(e,t,n){if(!1===this.counterSet)this.eventsQueue.set(Symbol(),{event:e,data:t,params:n});else{if(this.eventsQueue.size>0){var r=!0,o=!1,i=void 0;try{for(var a,c=this.eventsQueue[Symbol.iterator]();!(r=(a=c.next()).done);r=!0){var l=u(a.value,2),f=l[0],s=l[1];this.send(s),this.eventsQueue["delete"](f)}}catch(y){o=!0,i=y}finally{try{!r&&c["return"]&&c["return"]()}finally{if(o)throw i}}}this.send({event:e,data:t,params:n})}}},{key:"send",value:function(e){var t=e.event;e.data,e.params;console.log(t)}}]),t}(l.CounterInterface);n.YandexMetrika=f},{"./CounterInterface":3}],7:[function(e,t,n){"use strict";function r(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}function o(e,t){if(!e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return!t||"object"!=typeof t&&"function"!=typeof t?e:t}function i(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function, not "+typeof t);e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,enumerable:!1,writable:!0,configurable:!0}}),t&&(Object.setPrototypeOf?Object.setPrototypeOf(e,t):e.__proto__=t)}Object.defineProperty(n,"__esModule",{value:!0}),n.Click=void 0;var u=function(){function e(e,t){for(var n=0;n<t.length;n++){var r=t[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,r.key,r)}}return function(t,n,r){return n&&e(t.prototype,n),r&&e(t,r),t}}(),a=e("./EventInterface"),c=function(e){function t(){return r(this,t),o(this,Object.getPrototypeOf(t).apply(this,arguments))}return i(t,e),u(t,[{key:"handle",value:function(e){var t=!0,n=!1,r=void 0;try{for(var o,i=this.locator.counters.values()[Symbol.iterator]();!(t=(o=i.next()).done);t=!0){var u=o.value;u.sendEvent(e,{},{})}}catch(a){n=!0,r=a}finally{try{!t&&i["return"]&&i["return"]()}finally{if(n)throw r}}}},{key:"eventName",get:function(){return"click"}}]),t}(a.EventInterface);n.Click=c},{"./EventInterface":8}],8:[function(e,t,n){"use strict";function r(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}Object.defineProperty(n,"__esModule",{value:!0});var o=function(){function e(e,t){for(var n=0;n<t.length;n++){var r=t[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,r.key,r)}}return function(t,n,r){return n&&e(t.prototype,n),r&&e(t,r),t}}(),i=function(){function e(t,n){r(this,e),this.locator=t,this.init(n),this.attachHandlers(n)}return o(e,[{key:"init",value:function(e){}},{key:"attachHandlers",value:function(e){var t=this,n=Object.prototype.hasOwnProperty;if(null!==e&&n.call(e,"selectors")){var r=!0,o=!1,i=void 0;try{for(var u,a=e.selectors[Symbol.iterator]();!(r=(u=a.next()).done);r=!0)for(var c=u.value,l=document.querySelectorAll(c),f=0;f<l.length;f++)l[f].addEventListener(this.eventName,function(e){return t.handle(e)})}catch(s){o=!0,i=s}finally{try{!r&&a["return"]&&a["return"]()}finally{if(o)throw i}}}}},{key:"handle",value:function(e){}},{key:"eventName",get:function(){return""}}]),e}();n.EventInterface=i},{}],9:[function(e,t,n){"use strict";function r(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}function o(e,t){if(!e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return!t||"object"!=typeof t&&"function"!=typeof t?e:t}function i(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function, not "+typeof t);e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,enumerable:!1,writable:!0,configurable:!0}}),t&&(Object.setPrototypeOf?Object.setPrototypeOf(e,t):e.__proto__=t)}Object.defineProperty(n,"__esModule",{value:!0}),n.Submit=void 0;var u=function(){function e(e,t){for(var n=0;n<t.length;n++){var r=t[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,r.key,r)}}return function(t,n,r){return n&&e(t.prototype,n),r&&e(t,r),t}}(),a=e("./EventInterface"),c=function(e){function t(){return r(this,t),o(this,Object.getPrototypeOf(t).apply(this,arguments))}return i(t,e),u(t,[{key:"handle",value:function(e){var t=!0,n=!1,r=void 0;try{for(var o,i=this.locator.counters.values()[Symbol.iterator]();!(t=(o=i.next()).done);t=!0){var u=o.value;u.sendEvent(e,{},{})}}catch(a){n=!0,r=a}finally{try{!t&&i["return"]&&i["return"]()}finally{if(n)throw r}}}},{key:"eventName",get:function(){return"submit"}}]),t}(a.EventInterface);n.Submit=c},{"./EventInterface":8}]},{},[2]);
//# sourceMappingURL=data:application/json;base64,
