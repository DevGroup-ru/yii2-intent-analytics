!function e(t,n,r){function o(u,a){if(!n[u]){if(!t[u]){var c="function"==typeof require&&require;if(!a&&c)return c(u,!0);if(i)return i(u,!0);var l=new Error("Cannot find module '"+u+"'");throw l.code="MODULE_NOT_FOUND",l}var f=n[u]={exports:{}};t[u][0].call(f.exports,function(e){var n=t[u][1][e];return o(n?n:e)},f,f.exports,e,t,n,r)}return n[u].exports}for(var i="function"==typeof require&&require,u=0;u<r.length;u++)o(r[u]);return o}({1:[function(e,t,n){"use strict";function r(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}Object.defineProperty(n,"__esModule",{value:!0}),n.IntentAnalytics=void 0;var o="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol?"symbol":typeof e},i=function(){function e(e,t){for(var n=0;n<t.length;n++){var r=t[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,r.key,r)}}return function(t,n,r){return n&&e(t.prototype,n),r&&e(t,r),t}}(),u=e("./counters/GoogleAnalytics"),a=e("./counters/YandexMetrika"),c=function(){function e(){r(this,e),this.defaultOptions()}return i(e,[{key:"defaultOptions",value:function(){this.countersList={},this.actionQueue={}}},{key:"init",value:function(t){for(var n in t)if(t.hasOwnProperty(n)!==!1){var r=t[n],o=e.createCounter(r,n);null!==o&&(this.countersList[n]=o)}}},{key:"addToQueue",value:function(e,t,n){"object"!==o(this.actionQueue[e])&&(this.actionQueue[e]=[]),this.actionQueue[e].push({functionName:t,argument:n})}},{key:"checkUnhandled",value:function(){for(var t in this.actionQueue)if(this.actionQueue.hasOwnProperty(t)&&"object"===o(this.actionQueue[t])&&this.countersList.hasOwnProperty(t)&&null!==this.countersList[t].counter){var n=this.countersList[t],r=!0,i=!1,u=void 0;try{for(var a,c=this.actionQueue[t][Symbol.iterator]();!(r=(a=c.next()).done);r=!0){var l=a.value,f=l.functionName,s=l.argument;try{n[f](s)}catch(y){e.logError("Exception during queued "+f+" call: "+JSON.stringify(y))}}}catch(p){i=!0,u=p}finally{try{!r&&c["return"]&&c["return"]()}finally{if(i)throw u}}this.actionQueue[t]=!1}}},{key:"track",value:function(t){this.checkUnhandled();for(var n in t)if(t.hasOwnProperty(n)!==!1){var r=t[n];if(null===this.countersList[n].counter)this.addToQueue(n,"track",r);else if(this.countersList.hasOwnProperty(n))try{this.countersList[n].track(r)}catch(o){e.logError("Exception during track call: "+JSON.stringify(o))}}}},{key:"sendVariables",value:function(t){this.checkUnhandled();for(var n in this.countersList)if(this.countersList.hasOwnProperty(n)!==!1){var r=this.countersList[n];null===r.counter&&this.addToQueue(n,"sendVariables",t);try{r.sendVariables(t)}catch(o){e.logError("Exception during sendVariables call: "+JSON.stringify(o))}}}}],[{key:"createCounter",value:function(e,t){switch(t){case"GoogleAnalytics":return new u.GoogleAnalytics(e.javascriptObjectName,e);case"YandexMetrika":return new a.YandexMetrika(e.javascriptObjectName,e);default:return null}}},{key:"logError",value:function(e){"undefined"!=typeof console&&console.log(e)}}]),e}();n.IntentAnalytics=c},{"./counters/GoogleAnalytics":9,"./counters/YandexMetrika":10}],2:[function(e,t,n){"use strict";function r(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}Object.defineProperty(n,"__esModule",{value:!0}),n._iaq=void 0;var o=function(){function e(e,t){for(var n=0;n<t.length;n++){var r=t[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,r.key,r)}}return function(t,n,r){return n&&e(t.prototype,n),r&&e(t,r),t}}(),i=e("./counters/CounterGoogleAnalytics"),u=e("./counters/CounterYandexMetrika"),a=e("./counters/CounterPiwik"),c=e("./events/Click"),l=function(){function e(){r(this,e),this.counters=new Map,this.events=new Map,this.moduleMap=new Map,this.moduleMap.set("CounterGoogleAnalytics",i.CounterGoogleAnalytics),this.moduleMap.set("CounterYandexMetrika",u.CounterYandexMetrika),this.moduleMap.set("CounterPiwik",a.CounterPiwik),this.moduleMap.set("Click",c.Click)}return o(e,[{key:"addModule",value:function(e,t){this.moduleMap.set(e,t)}},{key:"addCounter",value:function(e,t,n,r){this.moduleMap.has(t)&&(t=this.moduleMap.get(t),this.counters.set(e,new t(this,n,r)))}},{key:"addEvent",value:function(e,t,n){if(this.moduleMap.has(e)){e=this.moduleMap.get(e);var r=this.events.has(t)?this.events.get(t):[];r.push(new e(this,n)),this.events.set(t,r)}}},{key:"addCounters",value:function(e){var t=!0,n=!1,r=void 0;try{for(var o,i=e[Symbol.iterator]();!(t=(o=i.next()).done);t=!0){var u=o.value;this.addCounter(u.id,u.jsModule,u.jsObject,u.options)}}catch(a){n=!0,r=a}finally{try{!t&&i["return"]&&i["return"]()}finally{if(n)throw r}}}},{key:"addEvents",value:function(e){var t=!0,n=!1,r=void 0;try{for(var o,i=e[Symbol.iterator]();!(t=(o=i.next()).done);t=!0){var u=o.value;this.addEvent(u.jsModule,u.type,u.options)}}catch(a){n=!0,r=a}finally{try{!t&&i["return"]&&i["return"]()}finally{if(n)throw r}}}},{key:"trigger",value:function(e,t){var n=this.events.has(e)?this.events.get(e):[],r=!0,o=!1,i=void 0;try{for(var u,a=n[Symbol.iterator]();!(r=(u=a.next()).done);r=!0){var c=u.value;c.trigger(t)}}catch(l){o=!0,i=l}finally{try{!r&&a["return"]&&a["return"]()}finally{if(o)throw i}}}}]),e}();n._iaq=new l},{"./counters/CounterGoogleAnalytics":5,"./counters/CounterPiwik":7,"./counters/CounterYandexMetrika":8,"./events/Click":11}],3:[function(e,t,n){(function(t){"use strict";var n=e("./IntentAnalytics"),r=e("./UnionAnalytics");t.intentAnalytics=new n.IntentAnalytics,t._iaq=r._iaq}).call(this,"undefined"!=typeof global?global:"undefined"!=typeof self?self:"undefined"!=typeof window?window:{})},{"./IntentAnalytics":1,"./UnionAnalytics":2}],4:[function(e,t,n){"use strict";function r(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}Object.defineProperty(n,"__esModule",{value:!0});var o=function(){function e(e,t){for(var n=0;n<t.length;n++){var r=t[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,r.key,r)}}return function(t,n,r){return n&&e(t.prototype,n),r&&e(t,r),t}}(),i=function(){function e(t,n){r(this,e),this.javascriptObjectName=t}return o(e,[{key:"track",value:function(e){}},{key:"sendVariables",value:function(e){}},{key:"counter",get:function(){return e.getCounterObject(this.javascriptObjectName)}}],[{key:"getCounterObject",value:function(e){return window[e]||null}}]),e}();n.AbstractCounter=i},{}],5:[function(e,t,n){"use strict";function r(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}function o(e,t){if(!e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return!t||"object"!=typeof t&&"function"!=typeof t?e:t}function i(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function, not "+typeof t);e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,enumerable:!1,writable:!0,configurable:!0}}),t&&(Object.setPrototypeOf?Object.setPrototypeOf(e,t):e.__proto__=t)}Object.defineProperty(n,"__esModule",{value:!0}),n.CounterGoogleAnalytics=void 0;var u=function(){function e(e,t){for(var n=0;n<t.length;n++){var r=t[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,r.key,r)}}return function(t,n,r){return n&&e(t.prototype,n),r&&e(t,r),t}}(),a=function f(e,t,n){null===e&&(e=Function.prototype);var r=Object.getOwnPropertyDescriptor(e,t);if(void 0===r){var o=Object.getPrototypeOf(e);return null===o?void 0:f(o,t,n)}if("value"in r)return r.value;var i=r.get;if(void 0!==i)return i.call(n)},c=e("./CounterInterface"),l=function(e){function t(){return r(this,t),o(this,Object.getPrototypeOf(t).apply(this,arguments))}return i(t,e),u(t,[{key:"init",value:function(e){a(Object.getPrototypeOf(t.prototype),"init",this).call(this,e)}},{key:"type",get:function(){return c.TYPE_GA}}]),t}(c.CounterInterface);n.CounterGoogleAnalytics=l},{"./CounterInterface":6}],6:[function(e,t,n){"use strict";function r(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}Object.defineProperty(n,"__esModule",{value:!0});var o=function(){function e(e,t){for(var n=0;n<t.length;n++){var r=t[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,r.key,r)}}return function(t,n,r){return n&&e(t.prototype,n),r&&e(t,r),t}}(),i=function(){function e(t,n,o){r(this,e),this.locator=t,this.jsObject=n,this.rawOptions=o,this.init(o)}return o(e,[{key:"init",value:function(e){}},{key:"type",get:function(){return""}}]),e}(),u="Google Analytics",a="Yandex.Metrika",c="Piwik";n.CounterInterface=i,n.TYPE_GA=u,n.TYPE_YA=a,n.TYPE_PI=c},{}],7:[function(e,t,n){"use strict";function r(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}function o(e,t){if(!e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return!t||"object"!=typeof t&&"function"!=typeof t?e:t}function i(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function, not "+typeof t);e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,enumerable:!1,writable:!0,configurable:!0}}),t&&(Object.setPrototypeOf?Object.setPrototypeOf(e,t):e.__proto__=t)}Object.defineProperty(n,"__esModule",{value:!0}),n.CounterPiwik=void 0;var u=function(){function e(e,t){for(var n=0;n<t.length;n++){var r=t[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,r.key,r)}}return function(t,n,r){return n&&e(t.prototype,n),r&&e(t,r),t}}(),a=function f(e,t,n){null===e&&(e=Function.prototype);var r=Object.getOwnPropertyDescriptor(e,t);if(void 0===r){var o=Object.getPrototypeOf(e);return null===o?void 0:f(o,t,n)}if("value"in r)return r.value;var i=r.get;if(void 0!==i)return i.call(n)},c=e("./CounterInterface"),l=function(e){function t(){return r(this,t),o(this,Object.getPrototypeOf(t).apply(this,arguments))}return i(t,e),u(t,[{key:"init",value:function(e){a(Object.getPrototypeOf(t.prototype),"init",this).call(this,e)}},{key:"type",get:function(){return c.TYPE_PI}}]),t}(c.CounterInterface);n.CounterPiwik=l},{"./CounterInterface":6}],8:[function(e,t,n){"use strict";function r(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}function o(e,t){if(!e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return!t||"object"!=typeof t&&"function"!=typeof t?e:t}function i(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function, not "+typeof t);e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,enumerable:!1,writable:!0,configurable:!0}}),t&&(Object.setPrototypeOf?Object.setPrototypeOf(e,t):e.__proto__=t)}Object.defineProperty(n,"__esModule",{value:!0}),n.CounterYandexMetrika=void 0;var u=function(){function e(e,t){for(var n=0;n<t.length;n++){var r=t[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,r.key,r)}}return function(t,n,r){return n&&e(t.prototype,n),r&&e(t,r),t}}(),a=function f(e,t,n){null===e&&(e=Function.prototype);var r=Object.getOwnPropertyDescriptor(e,t);if(void 0===r){var o=Object.getPrototypeOf(e);return null===o?void 0:f(o,t,n)}if("value"in r)return r.value;var i=r.get;if(void 0!==i)return i.call(n)},c=e("./CounterInterface"),l=function(e){function t(){return r(this,t),o(this,Object.getPrototypeOf(t).apply(this,arguments))}return i(t,e),u(t,[{key:"init",value:function(e){a(Object.getPrototypeOf(t.prototype),"init",this).call(this,e)}},{key:"type",get:function(){return c.TYPE_YA}}]),t}(c.CounterInterface);n.CounterYandexMetrika=l},{"./CounterInterface":6}],9:[function(e,t,n){"use strict";function r(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}function o(e,t){if(!e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return!t||"object"!=typeof t&&"function"!=typeof t?e:t}function i(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function, not "+typeof t);e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,enumerable:!1,writable:!0,configurable:!0}}),t&&(Object.setPrototypeOf?Object.setPrototypeOf(e,t):e.__proto__=t)}Object.defineProperty(n,"__esModule",{value:!0}),n.GoogleAnalytics=void 0;var u=function(){function e(e,t){for(var n=0;n<t.length;n++){var r=t[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,r.key,r)}}return function(t,n,r){return n&&e(t.prototype,n),r&&e(t,r),t}}(),a=e("./AbstractCounter"),c=e("../IntentAnalytics"),l=function(e){function t(){var e=arguments.length<=0||void 0===arguments[0]?"ga":arguments[0],n=arguments.length<=1||void 0===arguments[1]?{}:arguments[1];r(this,t);var i=o(this,Object.getPrototypeOf(t).call(this,e,n));return i.trackerName=n.trackerName||"",i}return i(t,e),u(t,[{key:"track",value:function(e){if("undefined"==typeof e.action)return void c.IntentAnalytics.logError("No action supplied for GoogleAnalytics.track: "+JSON.stringify(e));var t=this.trackerSendPrefix+"send";this.counter(t,{hitType:"event",eventCategory:e.category||"common",eventAction:e.action,eventLabel:e.label||void 0,eventValue:e.value||void 0})}},{key:"sendVariables",value:function(e){this.counter(this.trackerSendPrefix+"set",e)}},{key:"trackerSendPrefix",get:function(){return this.trackerName||""}}]),t}(a.AbstractCounter);n.GoogleAnalytics=l},{"../IntentAnalytics":1,"./AbstractCounter":4}],10:[function(e,t,n){"use strict";function r(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}function o(e,t){if(!e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return!t||"object"!=typeof t&&"function"!=typeof t?e:t}function i(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function, not "+typeof t);e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,enumerable:!1,writable:!0,configurable:!0}}),t&&(Object.setPrototypeOf?Object.setPrototypeOf(e,t):e.__proto__=t)}Object.defineProperty(n,"__esModule",{value:!0}),n.YandexMetrika=void 0;var u=function(){function e(e,t){for(var n=0;n<t.length;n++){var r=t[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,r.key,r)}}return function(t,n,r){return n&&e(t.prototype,n),r&&e(t,r),t}}(),a=e("./AbstractCounter"),c=e("../IntentAnalytics"),l=function(e){function t(e,n){return r(this,t),o(this,Object.getPrototypeOf(t).call(this,e,n))}return i(t,e),u(t,[{key:"track",value:function(e){return"undefined"==typeof e.goal?void c.IntentAnalytics.logError("No goal supplied for YandexMetrika.track: "+JSON.stringify(e)):void this.counter.reachGoal(e.goal,e.params||{})}},{key:"sendVariables",value:function(e){this.counter.params(e)}}]),t}(a.AbstractCounter);n.YandexMetrika=l},{"../IntentAnalytics":1,"./AbstractCounter":4}],11:[function(e,t,n){"use strict";function r(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}function o(e,t){if(!e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return!t||"object"!=typeof t&&"function"!=typeof t?e:t}function i(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function, not "+typeof t);e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,enumerable:!1,writable:!0,configurable:!0}}),t&&(Object.setPrototypeOf?Object.setPrototypeOf(e,t):e.__proto__=t)}Object.defineProperty(n,"__esModule",{value:!0}),n.Click=void 0;var u=function(){function e(e,t){for(var n=0;n<t.length;n++){var r=t[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,r.key,r)}}return function(t,n,r){return n&&e(t.prototype,n),r&&e(t,r),t}}(),a=function s(e,t,n){null===e&&(e=Function.prototype);var r=Object.getOwnPropertyDescriptor(e,t);if(void 0===r){var o=Object.getPrototypeOf(e);return null===o?void 0:s(o,t,n)}if("value"in r)return r.value;var i=r.get;if(void 0!==i)return i.call(n)},c=e("./EventInterface"),l=e("../counters/CounterInterface"),f=function(e){function t(){return r(this,t),o(this,Object.getPrototypeOf(t).apply(this,arguments))}return i(t,e),u(t,[{key:"init",value:function(e){var n=this;if(a(Object.getPrototypeOf(t.prototype),"init",this).call(this,e),e.hasOwnProperty("selectors"))for(var r=0;r<e.selectors.length;r++)for(var o=window.document.querySelectorAll(e.selectors[r]),i=0;i<o.length;i++)o[i].addEventListener("click",function(e){return n.eventHandler(e)})}},{key:"eventHandler",value:function(e){this.sendData()}},{key:"trigger",value:function(e){a(Object.getPrototypeOf(t.prototype),"trigger",this).call(this,e),this.sendData()}},{key:"sendData",value:function(){var e=!0,t=!1,n=void 0;try{for(var r,o=this.locator.counters.values()[Symbol.iterator]();!(e=(r=o.next()).done);e=!0){var i=r.value;l.TYPE_GA==i.type&&window[i.jsObject]("send","event","Action","click","Click")}}catch(u){t=!0,n=u}finally{try{!e&&o["return"]&&o["return"]()}finally{if(t)throw n}}}}]),t}(c.EventInterface);n.Click=f},{"../counters/CounterInterface":6,"./EventInterface":12}],12:[function(e,t,n){"use strict";function r(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}Object.defineProperty(n,"__esModule",{value:!0});var o=function(){function e(e,t){for(var n=0;n<t.length;n++){var r=t[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,r.key,r)}}return function(t,n,r){return n&&e(t.prototype,n),r&&e(t,r),t}}(),i=function(){function e(t,n){r(this,e),this.locator=t,this.init(n)}return o(e,[{key:"init",value:function(e){}},{key:"trigger",value:function(e){}}]),e}();n.EventInterface=i},{}]},{},[3]);
//# sourceMappingURL=data:application/json;base64,
