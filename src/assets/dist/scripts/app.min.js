!function e(t,n,r){function o(u,a){if(!n[u]){if(!t[u]){var c="function"==typeof require&&require;if(!a&&c)return c(u,!0);if(i)return i(u,!0);var s=new Error("Cannot find module '"+u+"'");throw s.code="MODULE_NOT_FOUND",s}var l=n[u]={exports:{}};t[u][0].call(l.exports,function(e){var n=t[u][1][e];return o(n?n:e)},l,l.exports,e,t,n,r)}return n[u].exports}for(var i="function"==typeof require&&require,u=0;u<r.length;u++)o(r[u]);return o}({1:[function(e,t,n){"use strict";function r(e){return e&&"undefined"!=typeof Symbol&&e.constructor===Symbol?"symbol":typeof e}function o(e){return e&&"undefined"!=typeof Symbol&&e.constructor===Symbol?"symbol":"undefined"==typeof e?"undefined":r(e)}function i(e){return e&&"undefined"!=typeof Symbol&&e.constructor===Symbol?"symbol":"undefined"==typeof e?"undefined":o(e)}function u(e){return e&&"undefined"!=typeof Symbol&&e.constructor===Symbol?"symbol":"undefined"==typeof e?"undefined":i(e)}function a(e){return e&&"undefined"!=typeof Symbol&&e.constructor===Symbol?"symbol":"undefined"==typeof e?"undefined":u(e)}function c(e){return e&&"undefined"!=typeof Symbol&&e.constructor===Symbol?"symbol":"undefined"==typeof e?"undefined":a(e)}function s(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}var l=function(){function e(e,t){for(var n=0;n<t.length;n++){var r=t[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,r.key,r)}}return function(t,n,r){return n&&e(t.prototype,n),r&&e(t,r),t}}();Object.defineProperty(n,"__esModule",{value:!0}),n.IntentAnalytics=void 0;var f=e("./counters/GoogleAnalytics"),y=e("./counters/YandexMetrika"),d=function(){function e(){s(this,e),this.defaultOptions()}return l(e,[{key:"defaultOptions",value:function(){this.countersList={},this.actionQueue={}}},{key:"init",value:function(t){for(var n in t)if(t.hasOwnProperty(n)!==!1){var r=t[n],o=e.createCounter(r,n);null!==o&&(this.countersList[n]=o)}}},{key:"addToQueue",value:function(e,t,n){"object"!==c(this.actionQueue[e])&&(this.actionQueue[e]=[]),this.actionQueue[e].push({functionName:t,argument:n})}},{key:"checkUnhandled",value:function(){for(var t in this.actionQueue)if(this.actionQueue.hasOwnProperty(t)&&"object"===c(this.actionQueue[t])&&this.countersList.hasOwnProperty(t)&&null!==this.countersList[t].counter){var n=this.countersList[t],r=!0,o=!1,i=void 0;try{for(var u,a=this.actionQueue[t][Symbol.iterator]();!(r=(u=a.next()).done);r=!0){var s=u.value,l=s.functionName,f=s.argument;try{n[l](f)}catch(y){e.logError("Exception during queued "+l+" call: "+JSON.stringify(y))}}}catch(d){o=!0,i=d}finally{try{!r&&a["return"]&&a["return"]()}finally{if(o)throw i}}this.actionQueue[t]=!1}}},{key:"track",value:function(t){this.checkUnhandled();for(var n in t)if(t.hasOwnProperty(n)!==!1){var r=t[n];if(null===this.countersList[n].counter)this.addToQueue(n,"track",r);else if(this.countersList.hasOwnProperty(n))try{this.countersList[n].track(r)}catch(o){e.logError("Exception during track call: "+JSON.stringify(o))}}}},{key:"sendVariables",value:function(t){this.checkUnhandled();for(var n in this.countersList)if(this.countersList.hasOwnProperty(n)!==!1){var r=this.countersList[n];null===r.counter&&this.addToQueue(n,"sendVariables",t);try{r.sendVariables(t)}catch(o){e.logError("Exception during sendVariables call: "+JSON.stringify(o))}}}}],[{key:"createCounter",value:function(e,t){switch(t){case"GoogleAnalytics":return new f.GoogleAnalytics(e.javascriptObjectName,e);case"YandexMetrika":return new y.YandexMetrika(e.javascriptObjectName,e);default:return null}}},{key:"logError",value:function(e){"undefined"!=typeof console&&console.log(e)}}]),e}();n.IntentAnalytics=d},{"./counters/GoogleAnalytics":4,"./counters/YandexMetrika":5}],2:[function(e,t,n){(function(t){"use strict";var n=e("./IntentAnalytics");t.intentAnalytics=new n.IntentAnalytics}).call(this,"undefined"!=typeof global?global:"undefined"!=typeof self?self:"undefined"!=typeof window?window:{})},{"./IntentAnalytics":1}],3:[function(e,t,n){"use strict";function r(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}var o=function(){function e(e,t){for(var n=0;n<t.length;n++){var r=t[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,r.key,r)}}return function(t,n,r){return n&&e(t.prototype,n),r&&e(t,r),t}}();Object.defineProperty(n,"__esModule",{value:!0});var i=function(){function e(t,n){r(this,e),this.javascriptObjectName=t}return o(e,[{key:"track",value:function(e){}},{key:"sendVariables",value:function(e){}},{key:"counter",get:function(){return e.getCounterObject(this.javascriptObjectName)}}],[{key:"getCounterObject",value:function(e){return window[e]||null}}]),e}();n.AbstractCounter=i},{}],4:[function(e,t,n){"use strict";function r(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}function o(e,t){if(!e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return!t||"object"!=typeof t&&"function"!=typeof t?e:t}function i(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function, not "+typeof t);e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,enumerable:!1,writable:!0,configurable:!0}}),t&&(Object.setPrototypeOf?Object.setPrototypeOf(e,t):e.__proto__=t)}var u=function(){function e(e,t){for(var n=0;n<t.length;n++){var r=t[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,r.key,r)}}return function(t,n,r){return n&&e(t.prototype,n),r&&e(t,r),t}}();Object.defineProperty(n,"__esModule",{value:!0}),n.GoogleAnalytics=void 0;var a=e("./AbstractCounter"),c=e("../IntentAnalytics"),s=function(e){function t(){var e=arguments.length<=0||void 0===arguments[0]?"ga":arguments[0],n=arguments.length<=1||void 0===arguments[1]?{}:arguments[1];r(this,t);var i=o(this,Object.getPrototypeOf(t).call(this,e,n));return i.trackerName=n.trackerName||"",i}return i(t,e),u(t,[{key:"track",value:function(e){if("undefined"==typeof e.action)return void c.IntentAnalytics.logError("No action supplied for GoogleAnalytics.track: "+JSON.stringify(e));var t=this.trackerSendPrefix+"send";this.counter(t,{hitType:"event",eventCategory:e.category||"common",eventAction:e.action,eventLabel:e.label||void 0,eventValue:e.value||void 0})}},{key:"sendVariables",value:function(e){this.counter(this.trackerSendPrefix+"set",e)}},{key:"trackerSendPrefix",get:function(){return this.trackerName||""}}]),t}(a.AbstractCounter);n.GoogleAnalytics=s},{"../IntentAnalytics":1,"./AbstractCounter":3}],5:[function(e,t,n){"use strict";function r(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}function o(e,t){if(!e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return!t||"object"!=typeof t&&"function"!=typeof t?e:t}function i(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function, not "+typeof t);e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,enumerable:!1,writable:!0,configurable:!0}}),t&&(Object.setPrototypeOf?Object.setPrototypeOf(e,t):e.__proto__=t)}var u=function(){function e(e,t){for(var n=0;n<t.length;n++){var r=t[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,r.key,r)}}return function(t,n,r){return n&&e(t.prototype,n),r&&e(t,r),t}}();Object.defineProperty(n,"__esModule",{value:!0}),n.YandexMetrika=void 0;var a=e("./AbstractCounter"),c=e("../IntentAnalytics"),s=function(e){function t(e,n){return r(this,t),o(this,Object.getPrototypeOf(t).call(this,e,n))}return i(t,e),u(t,[{key:"track",value:function(e){return"undefined"==typeof e.goal?void c.IntentAnalytics.logError("No goal supplied for YandexMetrika.track: "+JSON.stringify(e)):void this.counter.reachGoal(e.goal,e.params||{})}},{key:"sendVariables",value:function(e){this.counter.params(e)}}]),t}(a.AbstractCounter);n.YandexMetrika=s},{"../IntentAnalytics":1,"./AbstractCounter":3}]},{},[2]);
//# sourceMappingURL=data:application/json;base64,
